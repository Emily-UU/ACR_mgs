rm(list=ls())
setwd("XXX")
#print(Sys.time())
#set the seed to make it reproducible
set.seed(123)
  
##load libraries
library(rio)
library(vegan)
library(ggplot2)
library(vioplot)
##Folder to save the outputs
output.folder="xxx"

# load data
dades=import("xxx")


prop.otu <- dades[45:1095]
dades$alpha.shannon <- diversity(x = prop.otu)
dades$alpha.simpson <- diversity(x = prop.otu, index = "simpson")
dades$alpha.invsimpson <- diversity(x = prop.otu,index = "invsimpson" )


####################################################################
######################

# regression functions
fastlm.fun <- function(x,y,dades,covari=NULL,log=FALSE,rank.1=FALSE,ties.meth="keep") {
  tryCatch({
    xdades=dades[,c(x,y,covari)]
    covari=paste("+",paste(covari,collapse="+"),sep="")
    if(covari=="+"){
      covari=NULL
    }
    if(log==TRUE){
      xdades[,x]<-log(xdades[,x]+1)
      xdades[,y]<-log(xdades[,y]+1)
    }
    if(rank.1==TRUE){
      xdades[,x] <- rank(xdades[,x], ties.meth)
      xdades[,y] <- rank(xdades[,y], ties.meth)
      
    }
    
    fit <- eval(parse(text=paste("lm(",y,"~",x,covari,", data = xdades)")))
    coef<-summary(fit)$coefficients[x,]
    lower= coef["Estimate"] - qt(0.975, df = fit$df) * coef["Std. Error"]
    upper= coef["Estimate"] + qt(0.975, df = fit$df) * coef["Std. Error"]
    data.frame(var.x=x,var.y=y, estimate = coef["Estimate"],
               lower=lower,
               upper=upper,
               se = coef["Std. Error"],
               p.value = coef["Pr(>|t|)"],
               n = length(fit$fitted.values),
               aic=AIC(fit))
    
  }, error = function(e) {
    
    data.frame(var.x=x,var.y=y, estimate = NA,
               lower=NA,upper=NA,se = NA,
               p.value = NA,
               n = NA,aic=NA)
  })
}


#outcome
yi="acr"
#covariates
covari=c("agev1","gender", "q005a","plate")
covari2=c("agev1","gender", "q005a","plate","smokestatus","bbps","bbpd","crea_res", "diab_treat", "HBP_treat")
x="alpha.shannon"

#run the models

res.lm1 <- fastlm.fun(x,yi,dades,covari,log=FALSE,rank.1=FALSE)
res.lm1$model="crude"
res.lm2 <- fastlm.fun(x,yi,dades,covari2,log=FALSE,rank.1=FALSE)
res.lm2$model="multiple"

alph.lm=rbind(res.lm1,res.lm2)

#write.table(alph.lm,file=paste(output.folder,"/alph.lm_768_uu_malmo",".csv",sep=""),
#            col.names = T,row.names = F,sep="\t")
####################################################################


# Define MicroAlb groups
groups <- factor(dades$MicroAlb, labels = c("Normoalbuminuria", "Microalbuminuria", "Macroalbuminuria"), levels = c(0, 1, 2))


# Convert MicroAlb to factor
dades$MicroAlb <- factor(dades$MicroAlb, labels = c("Normoalbuminuria", "Microalbuminuria", "Macroalbuminuria"), levels = c(0, 1, 2))

# Perform ANOVA
ano <- aov(alpha.shannon ~ MicroAlb, data = dades)

# Perform Tukey's HSD test for post-hoc comparisons
tukey_result <- TukeyHSD(ano)

# Extract and print the p-values for group comparisons
comparison_pvalues <- tukey_result$`MicroAlb`[,4]

# Print the p-values for each group comparison
comparison_pvalues


##########violin plot

########## only shannon


#Define MicroAlb groups
#groups <- factor(dades$MicroAlb, labels = c("Normal", "Micro", "Macro"), levels = c(0, 1, 2))

# Perform ANOVA for alpha.shannon
ano <- aov(alpha.shannon ~ MicroAlb, data = dades)
p_value <- summary(ano)[[1]]$"Pr(>F)"[1]

# Create ggplot for Shannon diversity
shannon_plot <- ggplot(dades, aes(x = groups, y = alpha.shannon, fill = groups)) +
  geom_violin(trim = FALSE, alpha = 0.8) +
  geom_boxplot(width = 0.2, alpha = 0.5, color = "black", fill = "white") +
  theme_minimal() +
  labs(x = NULL, y = NULL) +
  scale_fill_manual(values = bxcol) +
  theme(legend.position = "none") +
  theme(panel.grid=element_blank()) 
 # geom_text(aes(label = ifelse(p_value < 0.001, "p-value < 0.001", paste("p-value =", round(p_value, 3))),
#              x = 1.86, y = 5.33), 
#             size = 4, hjust = 0)

# Save the plot to a PDF file
ggsave("alph_diversity_shannon.pdf", shannon_plot, width = 6, height = 6)

